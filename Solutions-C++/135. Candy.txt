class Solution {
public:
    int candy(vector<int>& ratings) {
        int n = ratings.size();
        if(n==1) return 1;
        vector<int> min(n, 1), minima, candy(n, 1);
        int totCandy = 1, minCandy = 1;
        if(ratings[0]<ratings[1]) minima.push_back(0);
        for(int i=1;i<ratings.size();i++) {
            if(ratings[i]>ratings[i-1]) {
                min[i] = 1;
            } else if(ratings[i]<ratings[i-1]) {
                min[i] = -1;
            } else {
                min[i] = 0;
            }
            if(min[i] == 1 && min[i-1] == -1) minima.push_back(i-1);
            if(min[i] == 0 && min[i-1] == -1) minima.push_back(i-1);
            if(min[i] == 1 && min[i-1] == 0) minima.push_back(i-1);
        }
        if(min[n-1] == -1) minima.push_back(n-1);
        
        for(auto index: minima) {
            // cout<<index<<" ";
            candy[index] = 1;
            int i = index - 1;
            while(i>=0 && min[i]==-1 && min[i+1]!=0) {
                candy[i] = candy[i+1]+1;
                i--;
            }
            if(i>=0 && min[i]!=-1 && min[i+1]!=0) candy[i] = max(candy[i], candy[i+1]+1);
            i = index + 1;
            while(i<n && min[i]==1) {
                candy[i] = candy[i-1]+1;
                i++;
            }
            if(i<n && min[i]==1) candy[i] = max(candy[i], candy[i-1]+1);
        }
        // cout<<endl;
        int sum = 0;
        for(auto num: candy) {
            sum += num;
            // cout<<num<<" ";
        }
        return sum;
    }
};